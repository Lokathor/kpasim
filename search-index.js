var searchIndex = JSON.parse('{\
"bitfrob":{"doc":"A crate to help with bit manipulation of integers.","t":[3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11],"n":["U128BitIterLow","U16BitIterLow","U32BitIterLow","U64BitIterLow","U8BitIterLow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","cmp","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_count_and_bits","from_count_and_bits","from_count_and_bits","from_count_and_bits","from_count_and_bits","hash","high","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","low","ne","next","next","next","next","next","partial_cmp","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","u128_get_bit","u128_get_region","u128_get_value","u128_region_mask","u128_replicate_bits","u128_with_bit","u128_with_region","u128_with_value","u16_get_bit","u16_get_region","u16_get_value","u16_region_mask","u16_replicate_bits","u16_with_bit","u16_with_region","u16_with_value","u32_get_bit","u32_get_region","u32_get_value","u32_region_mask","u32_replicate_bits","u32_with_bit","u32_with_region","u32_with_value","u64_get_bit","u64_get_region","u64_get_value","u64_region_mask","u64_replicate_bits","u64_with_bit","u64_with_region","u64_with_value","u8_get_bit","u8_get_region","u8_get_value","u8_region_mask","u8_replicate_bits","u8_with_bit","u8_with_region","u8_with_value","u8x2","with_high","with_low"],"q":["bitfrob","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator that will give out bit groups from within an …","An iterator that will give out bit groups from within an …","An iterator that will give out bit groups from within an …","An iterator that will give out bit groups from within an …","An iterator that will give out bit groups from within an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new iterator for <code>bits_per_iter</code> at a time out …","Constructs a new iterator for <code>bits_per_iter</code> at a time out …","Constructs a new iterator for <code>bits_per_iter</code> at a time out …","Constructs a new iterator for <code>bits_per_iter</code> at a time out …","Constructs a new iterator for <code>bits_per_iter</code> at a time out …","","The upper byte","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The lower byte","","","","","","","","","","","","","","","","","","","","","","","","","","Determines if the <code>b</code> bit is set in <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.","Generates a bit mask where all bits in the region are 1.","Replicates the low <code>count</code> bits across the entire value.","Replaces the <code>b</code> bit in <code>u</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …","Determines if the <code>b</code> bit is set in <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.","Generates a bit mask where all bits in the region are 1.","Replicates the low <code>count</code> bits across the entire value.","Replaces the <code>b</code> bit in <code>u</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …","Determines if the <code>b</code> bit is set in <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.","Generates a bit mask where all bits in the region are 1.","Replicates the low <code>count</code> bits across the entire value.","Replaces the <code>b</code> bit in <code>u</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …","Determines if the <code>b</code> bit is set in <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.","Generates a bit mask where all bits in the region are 1.","Replicates the low <code>count</code> bits across the entire value.","Replaces the <code>b</code> bit in <code>u</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …","Determines if the <code>b</code> bit is set in <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>.","Get the <code>low</code> to <code>high</code> bit region of <code>u</code>, down shifted by <code>low</code>.","Generates a bit mask where all bits in the region are 1.","Replicates the low <code>count</code> bits across the entire value.","Replaces the <code>b</code> bit in <code>u</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code>.","Replaces the <code>low</code> to <code>high</code> bit region of <code>old</code> with an input …","Two <code>u8</code> values packed as a <code>u16</code>.","Updates the upper byte value, returning the new <code>u8x2</code>","Updates the lower byte value, returning the new <code>u8x2</code>"],"i":[0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,1,1,1,2,3,4,5,6,1,2,3,4,5,6,2,3,4,5,6,1,1,1,2,3,4,5,6,2,3,4,5,6,1,1,2,3,4,5,6,1,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[1,1],7],[[],1],[[1,1],8],[[1,9],10],[[2,9],10],[[3,9],10],[[4,9],10],[[5,9],10],[[6,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[11,12],2],[[11,13],3],[[11,11],4],[[11,14],5],[[11,15],6],[1],[1,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,12],[[1,1],8],[2,[[16,[12]]]],[3,[[16,[13]]]],[4,[[16,[11]]]],[5,[[16,[14]]]],[6,[[16,[15]]]],[[1,1],[[16,[7]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[11,15],8],[[11,11,15],15],[[11,11,15],15],[[11,11],15],[[11,15],15],[[11,15,8],15],[[11,11,15,15],15],[[11,11,15,15],15],[[11,13],8],[[11,11,13],13],[[11,11,13],13],[[11,11],13],[[11,13],13],[[11,13,8],13],[[11,11,13,13],13],[[11,11,13,13],13],[[11,11],8],[[11,11,11],11],[[11,11,11],11],[[11,11],11],[[11,11],11],[[11,11,8],11],[[11,11,11,11],11],[[11,11,11,11],11],[[11,14],8],[[11,11,14],14],[[11,11,14],14],[[11,11],14],[[11,14],14],[[11,14,8],14],[[11,11,14,14],14],[[11,11,14,14],14],[[11,12],8],[[11,11,12],12],[[11,11,12],12],[[11,11],12],[[11,12],12],[[11,12,8],12],[[11,11,12,12],12],[[11,11,12,12],12],0,[[1,12],1],[[1,12],1]],"p":[[3,"u8x2"],[3,"U8BitIterLow"],[3,"U16BitIterLow"],[3,"U32BitIterLow"],[3,"U64BitIterLow"],[3,"U128BitIterLow"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u32"],[15,"u8"],[15,"u16"],[15,"u64"],[15,"u128"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between plain …","t":[13,8,2,8,16,18,18,8,13,8,4,8,13,13,8,8,8,11,11,5,5,5,5,5,5,5,0,11,11,11,11,11,5,5,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,11,5,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,4,13,13,11,11,5,5,5,5,5,11,11,11,11,11,11,5,5,11,11,10,11,5,5,5,5,5,5,11,5,5,11,5,11,12],"n":["AlignmentMismatch","AnyBitPattern","CheckedBitPattern","Contiguous","Int","MAX_VALUE","MIN_VALUE","NoUninit","OutputSliceWouldHaveSlop","Pod","PodCastError","PodInOption","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","ZeroableInOption","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","checked","clone","eq","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","offset_of","peel","peel","peel_mut","peel_mut","peel_ref","peel_ref","peel_slice","peel_slice","peel_slice_mut","peel_slice_mut","pod_align_to","pod_align_to_mut","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","wrap","wrap","wrap_mut","wrap_mut","wrap_ref","wrap_ref","wrap_slice","wrap_slice","wrap_slice_mut","wrap_slice_mut","zeroed","zeroed","Bits","CheckedBitPattern","CheckedCastError","InvalidBitPattern","PodCastError","borrow","borrow_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","eq","fmt","fmt","from","from","from_bytes","from_bytes_mut","hash","into","is_valid_bit_pattern","ne","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","0"],"q":["bytemuck","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytemuck::checked","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytemuck::checked::CheckedCastError"],"d":["For this type of cast the alignments must be exactly the …","Marker trait for “plain old data” types that are valid …","","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this type.","The lower <em>inclusive</em> bound for valid instances of this type.","Marker trait for “plain old data” types with no uninit …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between <code>Pod</code> data …","Trait for types which are Pod when wrapped in Option.","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a higher …","A trait which indicates that a type is a …","Trait for types that can be safely created with <code>zeroed</code>.","Trait for types which are Zeroable when wrapped in Option.","","","Re-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.","Re-interprets <code>&amp;mut T</code> as <code>&amp;mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","Checked versions of the casting functions exposed in crate …","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","Calls <code>U::from(self)</code>.","Perform the conversion from <code>C</code> into the underlying integral …","Perform the conversion from <code>C</code> into the underlying integral …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Convert the wrapper type into the inner type.","Convert the wrapper type into the inner type.","Convert a mutable reference to the wrapper type into a …","Convert a mutable reference to the wrapper type into a …","Convert a reference to the wrapper type into a reference …","Convert a reference to the wrapper type into a reference …","Convert a slice to the wrapped type into a slice to the …","Convert a slice to the wrapped type into a slice to the …","Convert a mutable slice to the wrapped type into a mutable …","Convert a mutable slice to the wrapped type into a mutable …","As <code>align_to</code>, but safe because of the <code>Pod</code> bound.","As <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","","Convert the inner type into the wrapper type.","Convert the inner type into the wrapper type.","Convert a mutable reference to the inner type into a …","Convert a mutable reference to the inner type into a …","Convert a reference to the inner type into a reference to …","Convert a reference to the inner type into a reference to …","Convert a slice to the inner type into a slice to the …","Convert a slice to the inner type into a slice to the …","Convert a mutable slice to the inner type into a mutable …","Convert a mutable slice to the inner type into a mutable …","Calls <code>zeroed</code>.","Calls <code>zeroed</code>.","<code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> …","A marker trait that allows types that have some invalid …","The things that can go wrong when casting between …","When casting to a <code>CheckedBitPattern</code> type, it is possible …","An error occurred during a true-[<code>Pod</code>] cast","","","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Calls <code>U::from(self)</code>.","If this function returns true, then it must be valid to …","","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","",""],"i":[3,0,0,0,12,12,12,0,3,0,0,0,3,3,0,0,0,3,3,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,12,12,3,3,12,12,0,0,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,3,0,0,3,0,3,13,13,13,13,13,13,13,13,13,13,14,14,10,0,0,11,11,11,11,0,0,0,0,0,11,11,11,11,11,11,0,0,11,11,10,11,0,0,0,0,0,0,11,0,0,11,0,11,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,2],[[]],[[]],[[]],[[]],0,[3,3],[[3,3],4],[[3,5],6],[[3,5],6],[[]],[[]],[[]],[[],7],[[],7],[3],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[1,[[8,[2,3]]]],[[],[[8,[3]]]],[[],[[8,[3]]]],[[],[[8,[3]]]],[[],[[8,[3]]]],[[],8],[[],[[8,[3]]]],[[],[[8,[3]]]],[[],8],[[],[[8,[2,3]]]],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[1,10],[[]],[[]],[[]],[[]],[11,11],[[11,11],4],[[11,5],6],[[11,5],6],[3,11],[[]],[[]],[[]],[11],[[]],[[],4],[[11,11],4],[[],2],[1,[[8,[10,11]]]],[[],[[8,[11]]]],[[],[[8,[11]]]],[[],[[8,[11]]]],[[],[[8,[11]]]],[[],8],[[],[[8,[11]]]],[[],[[8,[11]]]],[[],8],[[],[[8,[10,11]]]],[[],9],0],"p":[[8,"NoUninit"],[8,"AnyBitPattern"],[4,"PodCastError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"CheckedBitPattern"],[4,"CheckedCastError"],[8,"Contiguous"],[8,"TransparentWrapper"],[8,"Zeroable"],[13,"PodCastError"]]},\
"kpasim":{"doc":"","t":[0,0,0,0,0,0,4,3,3,13,13,13,13,4,13,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,10,10,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["cpu","data_bus","mbc","reg16","reg8","reg_flags","Action","Cpu","CpuByteFields","FetchImmHigh","FetchImmLow","Internal","PC","R16_","SP","a","action_queue","action_queue","af","b","bc","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","d","de","default","default","deref","deref_mut","e","eq","eq","eq","eq","fetch_pc","flags","fmt","fmt","fmt","fmt","from","from","from","from","h","hash","hash","hash","hash","hl","imm","imm","into","into","into","into","l","ne","ne","ne","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pc","pc","sp","sp","t_cycle","t_cycles","t_cycles","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","DataBus","read","write","MBC1","borrow","borrow_mut","from","into","new_boxed","read","try_from","try_into","type_id","write","Reg16","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","get","hash","inc","into","ne","new","partial_cmp","set","to_owned","to_string","try_from","try_into","type_id","Reg8","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","hash","into","ne","partial_cmp","to_owned","to_string","try_from","try_into","type_id","RegFlags","borrow","borrow_mut","c","clone","clone_into","cmp","default","eq","fmt","fmt","from","h","hash","into","n","ne","partial_cmp","set_c","set_h","set_n","set_z","to_owned","to_string","try_from","try_into","type_id","z"],"q":["kpasim","","","","","","kpasim::cpu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kpasim::cpu::Action","kpasim::data_bus","","","kpasim::mbc","","","","","","","","","","","kpasim::reg16","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kpasim::reg8","","","","","","","","","","","","","","","","","","","","","","","","","kpasim::reg_flags","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","A pending action for the CPU to perform.","Simulates the Game Boy’s LR35902 CPU.","A view of the CPU with the data registers broken into …","Fetch into the high byte of the imm buffer and move the …","Fetch into the low byte of the imm buffer.","Burn some time.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Grants a T-cycle worth of time to the CPU.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Prefix <code>$</code>, or <code>0x</code> with alternate","Prefix <code>$</code>, or <code>0x</code> with alternate","","","Prints in binary with a <code>%</code> prefix, or <code>0b</code> if you use the …","Prints the value as an unsigned decimal, or signed if you …","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Prefix <code>$</code>, or <code>0x</code> with alternate","Prefix <code>$</code>, or <code>0x</code> with alternate","","Prints in binary with a <code>%</code> prefix, or <code>0b</code> if you use the …","","Prints the value as an unsigned decimal, or signed if you …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","The flags register.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,3,3,3,4,0,4,2,1,2,1,2,1,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,2,1,1,2,1,1,2,1,2,3,4,1,2,1,2,3,4,1,2,3,4,2,1,2,3,4,1,1,2,1,2,3,4,2,1,2,3,1,1,2,3,4,1,2,1,2,1,1,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,22,0,7,7,0,16,16,16,16,16,16,16,16,16,16,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[1,1],5],[[2,2],5],[[3,3],5],[[4,4],5],0,0,[[],1],[[],2],[1],[1],0,[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,7],8],0,[[1,9],10],[[2,9],10],[[3,9],10],[[4,9],10],[[]],[[]],[[]],[[]],0,[1],[2],[3],[4],0,0,0,[[]],[[]],[[]],[[]],0,[[1,1],6],[[2,2],6],[[3,3],6],[[],1],[[1,1],[[11,[5]]]],[[2,2],[[11,[5]]]],[[3,3],[[11,[5]]]],[[4,4],[[11,[5]]]],0,0,0,0,[[1,7],6],0,0,[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,[14,8],[[14,8]],0,[[]],[[]],[[]],[[]],[[[15,[8]]],[[17,[16]]]],[[16,14],8],[[],12],[[],12],[[],13],[[16,14,8]],0,[[]],[[]],[18,18],[[]],[[18,18],5],[[],18],[[18,18],6],[[18,9],10],[[18,9],10],[[18,9],10],[[18,9],10],[[18,9],10],[[18,9],10],[[18,9],10],[[]],[18,14],[18],[18],[[]],[[18,18],6],[14,18],[[18,18],[[11,[5]]]],[[18,14]],[[]],[[],19],[[],12],[[],12],[[],13],0,[[]],[[]],[20,20],[[]],[[20,20],5],[[],20],[[20,20],6],[[20,9],10],[[20,9],10],[[20,9],10],[[20,9],10],[[20,9],10],[[20,9],10],[[20,9],10],[[]],[20],[[]],[[20,20],6],[[20,20],[[11,[5]]]],[[]],[[],19],[[],12],[[],12],[[],13],0,[[]],[[]],[21,6],[21,21],[[]],[[21,21],5],[[],21],[[21,21],6],[[21,9],10],[[21,9],10],[[]],[21,6],[21],[[]],[21,6],[[21,21],6],[[21,21],[[11,[5]]]],[[21,6]],[[21,6]],[[21,6]],[[21,6]],[[]],[[],19],[[],12],[[],12],[[],13],[21,6]],"p":[[3,"Cpu"],[3,"CpuByteFields"],[4,"Action"],[4,"R16_"],[4,"Ordering"],[15,"bool"],[8,"DataBus"],[15,"u8"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"u16"],[3,"Vec"],[3,"MBC1"],[3,"Box"],[3,"Reg16"],[3,"String"],[3,"Reg8"],[3,"RegFlags"],[13,"FetchImmHigh"]]},\
"tinyvec":{"doc":"<code>tinyvec</code> provides 100% safe vec-like data structures.","t":[8,3,3,3,3,18,16,3,3,3,11,11,14,14,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Array","ArrayVec","ArrayVecDrain","ArrayVecIterator","ArrayVecSplice","CAPACITY","Item","SliceVec","SliceVecDrain","TryFromSliceError","append","append","array_vec","array_vec","as_mut","as_mut","as_mut_ptr","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ptr","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","as_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone_from","cmp","cmp","count","default","default","default","deref","deref","deref_mut","deref_mut","drain","drain","drop","drop","eq","eq","eq","eq","eq","extend","extend","extend_from_slice","extend_from_slice","fill","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","from","from","from","from","from","from","from","from","from","from","from_array_empty","from_array_len","from_iter","from_slice_len","hash","hash","index","index","index_mut","index_mut","insert","insert","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","last","last","len","len","len","new","next","next","next","next","next_back","next_back","next_back","nth","nth","nth_back","nth_back","partial_cmp","partial_cmp","pop","pop","push","push","remove","remove","resize","resize","resize_with","resize_with","retain","retain","set_len","set_len","size_hint","size_hint","size_hint","splice","split_off","split_off","swap_remove","swap_remove","truncate","truncate","try_append","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_array_len","try_from_slice_len","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["tinyvecd":["A trait for types that are an array.","An array-backed, vector-like data structure.","Draining iterator for <code>ArrayVec</code>","Iterator for consuming an <code>ArrayVec</code> and returning owned …","Splicing iterator for <code>ArrayVec</code> See <code>ArrayVec::splice</code>","The number of slots in the thing.","The type of the items in the thing.","A slice-backed vector-like data structure.","Draining iterator for <code>SliceVec</code>","The error type returned when a conversion from a slice to …","Move all values from <code>other</code> into this vec.","","Helper to make an <code>ArrayVec</code>.","Helper to make an <code>ArrayVec</code>.","","","A <code>*mut</code> pointer to the backing array.","A <code>*mut</code> pointer to the backing slice.","Performs a <code>deref_mut</code>, into unique slice form.","Performs a <code>deref_mut</code>, into unique slice form.","A <code>*const</code> pointer to the backing array.","A <code>*const</code> pointer to the backing slice.","","","Gives a shared slice over the whole thing.","Performs a <code>deref</code>, into shared slice form.","Returns the remaining items of this iterator as a slice.","Performs a <code>deref</code>, into shared slice form.","Gives a unique slice over the whole thing.","","","","","","","","","","","","","","","","","","","The capacity of the <code>ArrayVec</code>.","The capacity of the <code>SliceVec</code>.","Truncates the <code>ArrayVec</code> down to length 0.","Truncates the <code>SliceVec</code> down to length 0.","","","","","","","Create a default-initialized instance of ourself, similar …","","","","","","","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","","","","","","","","","","Clone each element of the slice into this <code>ArrayVec</code>.","","Fill the vector until its capacity has been reached.","Fill the vector until its capacity has been reached.","","","","","","","","","","","","","","","","","","","","","","","The output has a length equal to the full array.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Uses the full slice as the initial length.","Calls <code>AsRef::as_mut</code> then uses the full slice as the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Wraps up an array as a new empty <code>ArrayVec</code>.","Wraps up an array and uses the given length as the initial …","","Wraps up a slice and uses the given length as the initial …","","","","","","","Inserts an item at the position given, moving all …","Inserts an item at the position given, moving all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner array of the <code>ArrayVec</code>.","","","","","","","","","Checks if the length is 0.","Checks if the length is 0.","","","The length of the <code>ArrayVec</code> (in elements).","","The length of the <code>SliceVec</code> (in elements).","Makes a new, empty <code>ArrayVec</code>.","","","","","","","","","","","","","","Remove and return the last element of the vec, if there is …","Remove and return the last element of the vec, if there is …","Place an element onto the end of the vec.","Place an element onto the end of the vec.","Removes the item at <code>index</code>, shifting all others down by one …","Removes the item at <code>index</code>, shifting all others down by one …","As <code>resize_with</code> and it clones the value as the closure.","As <code>resize_with</code> and it clones the value as the closure.","Resize the vec to the new length.","Resize the vec to the new length.","Walk the vec and keep only the elements that pass the …","Walk the vec and keep only the elements that pass the …","Forces the length of the vector to <code>new_len</code>.","Forces the length of the vector to <code>new_len</code>.","","","","Creates a splicing iterator that removes the specified …","Splits the collection at the point given.","Splits the collection at the point given.","Remove an element, swapping the end of the vec into its …","Remove an element, swapping the end of the vec into its …","Reduces the vec’s length to the given value.","Reduces the vec’s length to the given value.","Move all values from <code>other</code> into this vec. If appending …","","The output has a length equal to that of the slice, with …","","","","","","","Wraps an array, using the given length as the starting …","Wraps a slice, using the given length as the starting …","Tries to insert an item at the position given, moving all …","","","","","","","","Tries to place an element onto the end of the vec. Returns …","","","","","","",""],"i":[0,0,0,0,0,1,1,0,0,0,2,3,0,0,2,3,2,3,2,3,2,3,2,3,1,2,4,3,1,2,2,12,4,8,3,3,10,6,2,2,12,4,8,3,3,10,6,2,3,2,3,2,6,2,2,3,4,1,2,3,2,3,2,3,2,3,12,10,2,2,2,3,3,2,3,2,3,2,3,2,2,2,2,2,2,2,2,2,4,3,3,3,3,3,3,3,3,3,6,6,8,2,2,12,4,8,3,3,3,10,6,2,2,2,3,2,3,2,3,2,3,2,3,2,12,4,8,3,10,6,2,2,2,2,12,4,8,3,10,2,3,4,8,2,12,3,2,12,4,8,10,12,4,8,4,8,4,8,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,12,4,8,2,2,3,2,3,2,3,2,2,2,12,4,8,3,10,6,2,3,2,2,12,4,8,3,10,6,2,2,12,4,8,3,10,6],"f":[0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[3,3]],0,0,[[[2,[1]]]],[3],[[[2,[1]]]],[3],[[[2,[1]]]],[3],[[[2,[1]]]],[3],[[[2,[1]]]],[3],[[]],[[[2,[1]]]],[[[4,[1]]]],[3],[[]],[[[2,[1]]]],[[]],[[]],[[]],[[]],[[]],[3],[[]],[[]],[[]],[[[2,[1]]]],[[]],[[]],[[]],[3],[[]],[[]],[[]],[[[2,[1]]],5],[3,5],[[[2,[1]]]],[3],[2,2],[6,6],[[2,2]],[[[2,[1]],[2,[1]]],7],[[3,3],7],[[[4,[1]]],5],[[]],[[],[[2,[1]]]],[[],3],[[[2,[1]]]],[3],[[[2,[1]]]],[3],[[[2,[1]]],8],[[3,[9,[5]]],10],[[[12,[1,11]]]],[[[10,[13]]]],[[[2,[1]]],14],[[[2,[1]]],14],[[[2,[1]],[2,[1]]],14],[[3,3],14],[3,14],[[[2,[1]],15]],[[3,15]],[[[2,[1]]]],[3],[[[2,[1]],15]],[[3,15]],[[[2,[1]],16],17],[[[2,[1]],16],17],[[[2,[1]],16],17],[[[2,[1]],16],17],[[[2,[1]],16],17],[[[2,[1]],16],17],[[[2,[1]],16],17],[[[2,[1]],16],17],[[[2,[1]],16],17],[[[4,[1]],16],17],[[3,16],17],[[3,16],17],[[3,16],17],[[3,16],17],[[3,16],17],[[3,16],17],[[3,16],17],[[3,16],17],[[3,16],17],[[6,16],17],[[6,16],17],[[[8,[13]]]],[1,[[2,[1]]]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[]],[[]],[[]],[[],2],[[1,5],[[2,[1]]]],[15,[[2,[1]]]],[5,3],[[[2,[1]]]],[3],[[[2,[1]],18]],[3],[[[2,[1]],18]],[3],[[[2,[1]],5]],[[3,5]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],1],[2],[2],[[[2,[1]]]],[[]],[[]],[[]],[3],[[]],[[[2,[1]]],14],[3,14],[[[4,[1]]],19],[[[8,[13]]],19],[[[2,[1]]],5],[12,5],[3,5],[[],[[2,[1]]]],[[[12,[1,11]]],19],[[[4,[1]]],19],[[[8,[13]]],19],[[[10,[13]]],19],[12,19],[[[4,[1]]],19],[[[8,[13]]],19],[[[4,[1]],5],19],[[[8,[13]],5],19],[[[4,[1]],5],19],[[[8,[13]],5],19],[[[2,[1]],[2,[1]]],[[19,[7]]]],[[3,3],[[19,[7]]]],[[[2,[1]]],19],[3,19],[[[2,[1]]]],[3],[[[2,[1]],5]],[[3,5]],[[[2,[1]],5]],[[3,5]],[[[2,[1]],5,20]],[[3,5,20]],[[[2,[1]],20]],[[3,20]],[[[2,[1]],5]],[[3,5]],[[[12,[1,11]]]],[[[4,[1]]]],[[[8,[13]]]],[[[2,[1]]],[[12,[1,21]]]],[[[2,[1]],5],[[2,[1]]]],[[3,5],3],[[[2,[1]],5]],[[3,5]],[[[2,[1]],5]],[[3,5]],[[[2,[1]],[2,[1]]],[[19,[[2,[1]]]]]],[[],22],[[],[[22,[2]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[1,5],[[22,[[2,[1]],1]]]],[5,[[19,[3]]]],[[[2,[1]],5],19],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[[2,[1]]],19],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23]],"p":[[8,"Array"],[3,"ArrayVec"],[3,"SliceVec"],[3,"ArrayVecIterator"],[15,"usize"],[3,"TryFromSliceError"],[4,"Ordering"],[3,"ArrayVecDrain"],[8,"RangeBounds"],[3,"SliceVecDrain"],[8,"Iterator"],[3,"ArrayVecSplice"],[8,"Default"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[8,"SliceIndex"],[4,"Option"],[8,"FnMut"],[3,"Fuse"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
